package "tonyfettes/uv"

// Values
const EOF : Int = -4095

const STDERR : Int = 2

const STDIN : Int = 0

const STDOUT : Int = 1

fn accept(Stream, Stream) -> Int

fn args() -> FixedArray[Bytes]

fn buf_alloc() -> Buf

fn buf_free(Buf) -> Unit

fn buf_get_base(Buf) -> Bytes

fn buf_init(Buf, Bytes, Int) -> Unit

fn buf_set_len(Buf, UInt64) -> Unit

fn close(Handle, (Handle) -> Unit) -> Unit

fn connect_alloc() -> Connect

fn errno(Int) -> Unit!Errno

fn fs_alloc() -> Fs

fn fs_close(Loop, Fs, File, (Fs) -> Unit) -> Int

fn fs_get_result(Fs) -> Int64

fn fs_open(Loop, Fs, Bytes, OpenFlag, Int, (Fs) -> Unit) -> Int

fn fs_read(Loop, Fs, File, FixedArray[Buf], Int64, (Fs) -> Unit) -> Int

fn fs_req_cleanup(Fs) -> Unit

fn fs_to_req(Fs) -> Req

fn fs_write(Loop, Fs, File, FixedArray[Buf], Int64, (Fs) -> Unit) -> Int

fn handle_get_loop(Handle) -> Loop

fn idle_alloc() -> Idle

fn idle_init(Loop, Idle) -> Int

fn idle_start(Idle, (Idle) -> Unit) -> Int

fn idle_stop(Idle) -> Int

fn idle_to_handle(Idle) -> Handle

fn ip4_addr(Bytes, Int, SockaddrIn) -> Unit

fn ip6_addr(Bytes, Int, SockaddrIn6) -> Unit

fn listen(Stream, Int, (Stream, Int) -> Unit) -> Int

fn loop_alive(Loop) -> Int

fn loop_alloc() -> Loop

fn loop_close(Loop) -> Int

fn loop_init(Loop) -> Int

fn process_alloc() -> Process

fn process_close(Process, (Process) -> Unit) -> Unit

fn process_get_pid(Process) -> Int

fn process_options_alloc() -> ProcessOptions

fn process_options_set_args(ProcessOptions, FixedArray[Bytes?]) -> Unit

fn process_options_set_cwd(ProcessOptions, Bytes) -> Unit

fn process_options_set_env(ProcessOptions, FixedArray[Bytes?]) -> Unit

fn process_options_set_file(ProcessOptions, Bytes) -> Unit

fn process_options_set_flags(ProcessOptions, ProcessFlags) -> Unit

fn process_options_set_stdio(ProcessOptions, FixedArray[StdioContainer]) -> Unit

fn read_start(Stream, (Handle, UInt64, Buf) -> Unit, (Stream, Int64, Buf) -> Unit) -> Int

fn read_stop(Stream) -> Int

fn run(Loop, RunMode) -> Int

fn sockaddr_in_alloc() -> SockaddrIn

fn spawn(Loop, Process, ProcessOptions, (Process, Int64, Int) -> Unit) -> Int

fn stdio_container_alloc() -> StdioContainer

fn stdio_container_set_flags(StdioContainer, StdioFlags) -> Unit

fn stop(Loop) -> Unit

fn strerror(Int) -> String

fn strerror_r(Int, Bytes) -> Unit

fn tcp_alloc() -> Tcp

fn tcp_bind(Tcp, Sockaddr, Int) -> Int

fn tcp_connect(Connect, Tcp, Sockaddr, (Connect, Int) -> Unit) -> Int

fn tcp_init(Loop, Tcp) -> Int

fn timer_alloc() -> Timer

fn timer_get_due_in(Timer) -> UInt64

fn timer_get_repeat(Timer) -> UInt64

fn timer_init(Loop, Timer) -> Int

fn timer_set_repeat(Timer, UInt64) -> Unit

fn timer_start(Timer, (Timer) -> Unit, UInt64, UInt64) -> Int

fn timer_stop(Timer) -> Int

fn tty_alloc() -> Tty

fn tty_init(Loop, Tty, File) -> Int

fn tty_reset_mode() -> Int

fn tty_set_mode(Tty, TtyMode) -> Int

fn uv_disable_stdio_inheritance() -> Unit

fn uv_stdio_container_fd(StdioFlags, Int) -> StdioContainer

fn uv_stdio_container_stream(StdioFlags, Stream) -> StdioContainer

fn write(Write, Stream, FixedArray[Buf], (Write, Int) -> Unit) -> Int

fn write_alloc() -> Write

// Types and methods
type Buf

type Connect
impl Connect {
  to_req(Self) -> Req
}

pub type! Errno Int
impl Show for Errno

pub(all) type File Int

type Fs
impl Fs {
  fs_to_req(Self) -> Req
}

type Handle

type Idle

type Loop
impl Loop {
  spawn(Self, Process, ProcessOptions, (Process, Int64, Int) -> Unit) -> Int
}

pub(all) enum OpenFlag {
  ReadOnly
  WriteOnly
  ReadWrite
}

type Process
impl Process {
  process_close(Self, (Self) -> Unit) -> Unit
}

type ProcessFlags

type ProcessOptions

type Req

pub(all) enum RunMode {
  Default
  Once
  NoWait
}

type Sockaddr

type SockaddrIn
impl SockaddrIn {
  to_sockaddr(Self) -> Sockaddr
}

type SockaddrIn6

type StdioContainer

type StdioFlags

type Stream
impl Stream {
  to_handle(Self) -> Handle
}

type Tcp
impl Tcp {
  to_handle(Self) -> Handle
  to_stream(Self) -> Stream
}

type Timer

type Tty
impl Tty {
  to_stream(Self) -> Stream
}

pub(all) enum TtyMode {
  Normal
  Raw
  Io
  RawVT
}

type Write

// Type aliases

// Traits

